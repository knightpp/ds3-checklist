// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ds3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Location {
  Location._(this._bc, this._bcOffset);
  factory Location(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Location> reader = _LocationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get note => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Location{name: $name, note: $note}';
  }
}

class _LocationReader extends fb.TableReader<Location> {
  const _LocationReader();

  @override
  Location createObject(fb.BufferContext bc, int offset) => 
    Location._(bc, offset);
}

class LocationBuilder {
  LocationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNoteOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocationObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _note;

  LocationObjectBuilder({
    String? name,
    String? note,
  })
      : _name = name,
        _note = note;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? noteOffset = _note == null ? null
        : fbBuilder.writeString(_note!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, noteOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Task {
  Task._(this._bc, this._bcOffset);
  factory Task(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Task> reader = _TaskReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<String>? get tags => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  String? get text => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Task{id: $id, tags: $tags, text: $text}';
  }
}

class _TaskReader extends fb.TableReader<Task> {
  const _TaskReader();

  @override
  Task createObject(fb.BufferContext bc, int offset) => 
    Task._(bc, offset);
}

class TaskBuilder {
  TaskBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTagsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTextOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaskObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final List<String>? _tags;
  final String? _text;

  TaskObjectBuilder({
    int? id,
    List<String>? tags,
    String? text,
  })
      : _id = id,
        _tags = tags,
        _text = text;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? tagsOffset = _tags == null ? null
        : fbBuilder.writeList(_tags!.map(fbBuilder.writeString).toList());
    final int? textOffset = _text == null ? null
        : fbBuilder.writeString(_text!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, tagsOffset);
    fbBuilder.addOffset(2, textOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Playthrough {
  Playthrough._(this._bc, this._bcOffset);
  factory Playthrough(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Playthrough> reader = _PlaythroughReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Location? get location => Location.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Task>? get tasks => const fb.ListReader<Task>(Task.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Playthrough{location: $location, tasks: $tasks}';
  }
}

class _PlaythroughReader extends fb.TableReader<Playthrough> {
  const _PlaythroughReader();

  @override
  Playthrough createObject(fb.BufferContext bc, int offset) => 
    Playthrough._(bc, offset);
}

class PlaythroughBuilder {
  PlaythroughBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLocationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTasksOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlaythroughObjectBuilder extends fb.ObjectBuilder {
  final LocationObjectBuilder? _location;
  final List<TaskObjectBuilder>? _tasks;

  PlaythroughObjectBuilder({
    LocationObjectBuilder? location,
    List<TaskObjectBuilder>? tasks,
  })
      : _location = location,
        _tasks = tasks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? locationOffset = _location?.getOrCreateOffset(fbBuilder);
    final int? tasksOffset = _tasks == null ? null
        : fbBuilder.writeList(_tasks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, locationOffset);
    fbBuilder.addOffset(1, tasksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PlaythroughRoot {
  PlaythroughRoot._(this._bc, this._bcOffset);
  factory PlaythroughRoot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PlaythroughRoot> reader = _PlaythroughRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Playthrough>? get items => const fb.ListReader<Playthrough>(Playthrough.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PlaythroughRoot{items: $items}';
  }
}

class _PlaythroughRootReader extends fb.TableReader<PlaythroughRoot> {
  const _PlaythroughRootReader();

  @override
  PlaythroughRoot createObject(fb.BufferContext bc, int offset) => 
    PlaythroughRoot._(bc, offset);
}

class PlaythroughRootBuilder {
  PlaythroughRootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlaythroughRootObjectBuilder extends fb.ObjectBuilder {
  final List<PlaythroughObjectBuilder>? _items;

  PlaythroughRootObjectBuilder({
    List<PlaythroughObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
