// @dart=2.11
// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ArmorCategory {
  ArmorCategory._(this._bc, this._bcOffset);
  factory ArmorCategory(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorCategory> reader = const _ArmorCategoryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<String> get gearNames => const fb.ListReader<String>(const fb.StringReader()).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'ArmorCategory{name: $name, gearNames: $gearNames}';
  }
}

class _ArmorCategoryReader extends fb.TableReader<ArmorCategory> {
  const _ArmorCategoryReader();

  @override
  ArmorCategory createObject(fb.BufferContext bc, int offset) => 
    new ArmorCategory._(bc, offset);
}

class ArmorCategoryBuilder {
  ArmorCategoryBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGearNamesOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorCategoryObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final List<String> _gearNames;

  ArmorCategoryObjectBuilder({
    String name,
    List<String> gearNames,
  })
      : _name = name,
        _gearNames = gearNames;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int gearNamesOffset = _gearNames?.isNotEmpty == true
        ? fbBuilder.writeList(_gearNames.map((b) => fbBuilder.writeString(b)).toList())
        : null;

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (gearNamesOffset != null) {
      fbBuilder.addOffset(1, gearNamesOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class ArmorRoot {
  ArmorRoot._(this._bc, this._bcOffset);
  factory ArmorRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorRoot> reader = const _ArmorRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ArmorCategory> get items => const fb.ListReader<ArmorCategory>(ArmorCategory.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'ArmorRoot{items: $items}';
  }
}

class _ArmorRootReader extends fb.TableReader<ArmorRoot> {
  const _ArmorRootReader();

  @override
  ArmorRoot createObject(fb.BufferContext bc, int offset) => 
    new ArmorRoot._(bc, offset);
}

class ArmorRootBuilder {
  ArmorRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorRootObjectBuilder extends fb.ObjectBuilder {
  final List<ArmorCategoryObjectBuilder> _items;

  ArmorRootObjectBuilder({
    List<ArmorCategoryObjectBuilder> items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
