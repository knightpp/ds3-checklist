// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ds3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Soul {
  Soul._(this._bc, this._bcOffset);
  factory Soul(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Soul> reader = _SoulReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get price => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Soul{name: ${name}, price: ${price}}';
  }
}

class _SoulReader extends fb.TableReader<Soul> {
  const _SoulReader();

  @override
  Soul createObject(fb.BufferContext bc, int offset) => 
    Soul._(bc, offset);
}

class SoulBuilder {
  SoulBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPrice(int? price) {
    fbBuilder.addUint16(1, price);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoulObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _price;

  SoulObjectBuilder({
    String? name,
    int? price,
  })
      : _name = name,
        _price = price;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addUint16(1, _price);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SoulsRoot {
  SoulsRoot._(this._bc, this._bcOffset);
  factory SoulsRoot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SoulsRoot> reader = _SoulsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Soul>? get items => const fb.ListReader<Soul>(Soul.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SoulsRoot{items: ${items}}';
  }
}

class _SoulsRootReader extends fb.TableReader<SoulsRoot> {
  const _SoulsRootReader();

  @override
  SoulsRoot createObject(fb.BufferContext bc, int offset) => 
    SoulsRoot._(bc, offset);
}

class SoulsRootBuilder {
  SoulsRootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoulsRootObjectBuilder extends fb.ObjectBuilder {
  final List<SoulObjectBuilder>? _items;

  SoulsRootObjectBuilder({
    List<SoulObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
