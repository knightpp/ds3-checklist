// @dart=2.11
// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Achievement {
  Achievement._(this._bc, this._bcOffset);
  factory Achievement(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Achievement> reader = const _AchievementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get description => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  List<Task> get tasks => const fb.ListReader<Task>(Task.reader).vTableGet(_bc, _bcOffset, 8, null);

  @override
  String toString() {
    return 'Achievement{name: $name, description: $description, tasks: $tasks}';
  }
}

class _AchievementReader extends fb.TableReader<Achievement> {
  const _AchievementReader();

  @override
  Achievement createObject(fb.BufferContext bc, int offset) => 
    new Achievement._(bc, offset);
}

class AchievementBuilder {
  AchievementBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTasksOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AchievementObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final String _description;
  final List<TaskObjectBuilder> _tasks;

  AchievementObjectBuilder({
    String name,
    String description,
    List<TaskObjectBuilder> tasks,
  })
      : _name = name,
        _description = description,
        _tasks = tasks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int descriptionOffset = fbBuilder.writeString(_description);
    final int tasksOffset = _tasks?.isNotEmpty == true
        ? fbBuilder.writeList(_tasks.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (descriptionOffset != null) {
      fbBuilder.addOffset(1, descriptionOffset);
    }
    if (tasksOffset != null) {
      fbBuilder.addOffset(2, tasksOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Task {
  Task._(this._bc, this._bcOffset);
  factory Task(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Task> reader = const _TaskReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  String get description => const fb.StringReader().vTableGet(_bc, _bcOffset, 8, null);
  int get play => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'Task{id: $id, name: $name, description: $description, play: $play}';
  }
}

class _TaskReader extends fb.TableReader<Task> {
  const _TaskReader();

  @override
  Task createObject(fb.BufferContext bc, int offset) => 
    new Task._(bc, offset);
}

class TaskBuilder {
  TaskBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addId(int id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPlay(int play) {
    fbBuilder.addUint8(3, play);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaskObjectBuilder extends fb.ObjectBuilder {
  final int _id;
  final String _name;
  final String _description;
  final int _play;

  TaskObjectBuilder({
    int id,
    String name,
    String description,
    int play,
  })
      : _id = id,
        _name = name,
        _description = description,
        _play = play;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int descriptionOffset = fbBuilder.writeString(_description);

    fbBuilder.startTable();
    fbBuilder.addUint32(0, _id);
    if (nameOffset != null) {
      fbBuilder.addOffset(1, nameOffset);
    }
    if (descriptionOffset != null) {
      fbBuilder.addOffset(2, descriptionOffset);
    }
    fbBuilder.addUint8(3, _play);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class AchievementsRoot {
  AchievementsRoot._(this._bc, this._bcOffset);
  factory AchievementsRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AchievementsRoot> reader = const _AchievementsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Achievement> get items => const fb.ListReader<Achievement>(Achievement.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'AchievementsRoot{items: $items}';
  }
}

class _AchievementsRootReader extends fb.TableReader<AchievementsRoot> {
  const _AchievementsRootReader();

  @override
  AchievementsRoot createObject(fb.BufferContext bc, int offset) => 
    new AchievementsRoot._(bc, offset);
}

class AchievementsRootBuilder {
  AchievementsRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AchievementsRootObjectBuilder extends fb.ObjectBuilder {
  final List<AchievementObjectBuilder> _items;

  AchievementsRootObjectBuilder({
    List<AchievementObjectBuilder> items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
