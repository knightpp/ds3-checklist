// @dart=2.11
// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Trade {
  Trade._(this._bc, this._bcOffset);
  factory Trade(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Trade> reader = const _TradeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get what => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get for => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Trade{what: $what, for: $for}';
  }
}

class _TradeReader extends fb.TableReader<Trade> {
  const _TradeReader();

  @override
  Trade createObject(fb.BufferContext bc, int offset) => 
    new Trade._(bc, offset);
}

class TradeBuilder {
  TradeBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addWhatOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addForOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TradeObjectBuilder extends fb.ObjectBuilder {
  final String _what;
  final String _for;

  TradeObjectBuilder({
    String what,
    String for,
  })
      : _what = what,
        _for = for;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int whatOffset = fbBuilder.writeString(_what);
    final int forOffset = fbBuilder.writeString(_for);

    fbBuilder.startTable();
    if (whatOffset != null) {
      fbBuilder.addOffset(0, whatOffset);
    }
    if (forOffset != null) {
      fbBuilder.addOffset(1, forOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class TradesRoot {
  TradesRoot._(this._bc, this._bcOffset);
  factory TradesRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TradesRoot> reader = const _TradesRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Trade> get items => const fb.ListReader<Trade>(Trade.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'TradesRoot{items: $items}';
  }
}

class _TradesRootReader extends fb.TableReader<TradesRoot> {
  const _TradesRootReader();

  @override
  TradesRoot createObject(fb.BufferContext bc, int offset) => 
    new TradesRoot._(bc, offset);
}

class TradesRootBuilder {
  TradesRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TradesRootObjectBuilder extends fb.ObjectBuilder {
  final List<TradeObjectBuilder> _items;

  TradesRootObjectBuilder({
    List<TradeObjectBuilder> items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
