// @dart=2.11
// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class WSCategory {
  WSCategory._(this._bc, this._bcOffset);
  factory WSCategory(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WSCategory> reader = const _WSCategoryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<Item> get items => const fb.ListReader<Item>(Item.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'WSCategory{name: $name, items: $items}';
  }
}

class _WSCategoryReader extends fb.TableReader<WSCategory> {
  const _WSCategoryReader();

  @override
  WSCategory createObject(fb.BufferContext bc, int offset) => 
    new WSCategory._(bc, offset);
}

class WSCategoryBuilder {
  WSCategoryBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WSCategoryObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final List<ItemObjectBuilder> _items;

  WSCategoryObjectBuilder({
    String name,
    List<ItemObjectBuilder> items,
  })
      : _name = name,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (itemsOffset != null) {
      fbBuilder.addOffset(1, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Item {
  Item._(this._bc, this._bcOffset);
  factory Item(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Item> reader = const _ItemReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Item{id: $id, name: $name}';
  }
}

class _ItemReader extends fb.TableReader<Item> {
  const _ItemReader();

  @override
  Item createObject(fb.BufferContext bc, int offset) => 
    new Item._(bc, offset);
}

class ItemBuilder {
  ItemBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addId(int id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ItemObjectBuilder extends fb.ObjectBuilder {
  final int _id;
  final String _name;

  ItemObjectBuilder({
    int id,
    String name,
  })
      : _id = id,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);

    fbBuilder.startTable();
    fbBuilder.addUint32(0, _id);
    if (nameOffset != null) {
      fbBuilder.addOffset(1, nameOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class WeaponsAndShieldsRoot {
  WeaponsAndShieldsRoot._(this._bc, this._bcOffset);
  factory WeaponsAndShieldsRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeaponsAndShieldsRoot> reader = const _WeaponsAndShieldsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<WSCategory> get items => const fb.ListReader<WSCategory>(WSCategory.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'WeaponsAndShieldsRoot{items: $items}';
  }
}

class _WeaponsAndShieldsRootReader extends fb.TableReader<WeaponsAndShieldsRoot> {
  const _WeaponsAndShieldsRootReader();

  @override
  WeaponsAndShieldsRoot createObject(fb.BufferContext bc, int offset) => 
    new WeaponsAndShieldsRoot._(bc, offset);
}

class WeaponsAndShieldsRootBuilder {
  WeaponsAndShieldsRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeaponsAndShieldsRootObjectBuilder extends fb.ObjectBuilder {
  final List<WSCategoryObjectBuilder> _items;

  WeaponsAndShieldsRootObjectBuilder({
    List<WSCategoryObjectBuilder> items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
