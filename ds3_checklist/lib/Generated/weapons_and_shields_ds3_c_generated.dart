// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ds3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Wscategory {
  Wscategory._(this._bc, this._bcOffset);
  factory Wscategory(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Wscategory> reader = _WscategoryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<Item>? get items => const fb.ListReader<Item>(Item.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Wscategory{name: ${name}, items: ${items}}';
  }
}

class _WscategoryReader extends fb.TableReader<Wscategory> {
  const _WscategoryReader();

  @override
  Wscategory createObject(fb.BufferContext bc, int offset) => 
    Wscategory._(bc, offset);
}

class WscategoryBuilder {
  WscategoryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WscategoryObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<ItemObjectBuilder>? _items;

  WscategoryObjectBuilder({
    String? name,
    List<ItemObjectBuilder>? items,
  })
      : _name = name,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Item {
  Item._(this._bc, this._bcOffset);
  factory Item(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Item> reader = _ItemReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Item{id: ${id}, name: ${name}}';
  }
}

class _ItemReader extends fb.TableReader<Item> {
  const _ItemReader();

  @override
  Item createObject(fb.BufferContext bc, int offset) => 
    Item._(bc, offset);
}

class ItemBuilder {
  ItemBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ItemObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;

  ItemObjectBuilder({
    int? id,
    String? name,
  })
      : _id = id,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WeaponsAndShieldsRoot {
  WeaponsAndShieldsRoot._(this._bc, this._bcOffset);
  factory WeaponsAndShieldsRoot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeaponsAndShieldsRoot> reader = _WeaponsAndShieldsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Wscategory>? get items => const fb.ListReader<Wscategory>(Wscategory.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'WeaponsAndShieldsRoot{items: ${items}}';
  }
}

class _WeaponsAndShieldsRootReader extends fb.TableReader<WeaponsAndShieldsRoot> {
  const _WeaponsAndShieldsRootReader();

  @override
  WeaponsAndShieldsRoot createObject(fb.BufferContext bc, int offset) => 
    WeaponsAndShieldsRoot._(bc, offset);
}

class WeaponsAndShieldsRootBuilder {
  WeaponsAndShieldsRootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeaponsAndShieldsRootObjectBuilder extends fb.ObjectBuilder {
  final List<WscategoryObjectBuilder>? _items;

  WeaponsAndShieldsRootObjectBuilder({
    List<WscategoryObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
