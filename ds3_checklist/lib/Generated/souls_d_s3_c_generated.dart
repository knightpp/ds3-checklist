// @dart=2.11
// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Soul {
  Soul._(this._bc, this._bcOffset);
  factory Soul(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Soul> reader = const _SoulReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  int get price => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Soul{name: $name, price: $price}';
  }
}

class _SoulReader extends fb.TableReader<Soul> {
  const _SoulReader();

  @override
  Soul createObject(fb.BufferContext bc, int offset) => 
    new Soul._(bc, offset);
}

class SoulBuilder {
  SoulBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPrice(int price) {
    fbBuilder.addUint16(1, price);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoulObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final int _price;

  SoulObjectBuilder({
    String name,
    int price,
  })
      : _name = name,
        _price = price;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    fbBuilder.addUint16(1, _price);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SoulsRoot {
  SoulsRoot._(this._bc, this._bcOffset);
  factory SoulsRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SoulsRoot> reader = const _SoulsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Soul> get items => const fb.ListReader<Soul>(Soul.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'SoulsRoot{items: $items}';
  }
}

class _SoulsRootReader extends fb.TableReader<SoulsRoot> {
  const _SoulsRootReader();

  @override
  SoulsRoot createObject(fb.BufferContext bc, int offset) => 
    new SoulsRoot._(bc, offset);
}

class SoulsRootBuilder {
  SoulsRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SoulsRootObjectBuilder extends fb.ObjectBuilder {
  final List<SoulObjectBuilder> _items;

  SoulsRootObjectBuilder({
    List<SoulObjectBuilder> items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int itemsOffset = _items?.isNotEmpty == true
        ? fbBuilder.writeList(_items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
