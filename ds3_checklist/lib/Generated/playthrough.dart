// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library d_s3_c.playthrough;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class Location {
  Location._(this._bc, this._bcOffset);
  factory Location(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Location> reader = const _LocationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get link => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  String? get note =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 8, null);

  @override
  String toString() {
    return 'Location{name: $name, link: $link, note: $note}';
  }
}

class _LocationReader extends fb.TableReader<Location> {
  const _LocationReader();

  @override
  Location createObject(fb.BufferContext bc, int offset) =>
      new Location._(bc, offset);
}

class LocationBuilder {
  LocationBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addLinkOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addNoteOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocationObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final String _link;
  final String _note;

  LocationObjectBuilder({
    required String name,
    required String link,
    required String note,
  })   : _name = name,
        _link = link,
        _note = note;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int linkOffset = fbBuilder.writeString(_link);
    final int noteOffset = fbBuilder.writeString(_note);

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (linkOffset != null) {
      fbBuilder.addOffset(1, linkOffset);
    }
    if (noteOffset != null) {
      fbBuilder.addOffset(2, noteOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}

class Task {
  Task._(this._bc, this._bcOffset);
  factory Task(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Task> reader = const _TaskReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get dataId =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<String> get tags => const fb.ListReader<String>(const fb.StringReader())
      .vTableGet(_bc, _bcOffset, 6, null);
  String get text => const fb.StringReader().vTableGet(_bc, _bcOffset, 8, null);
  List<String> get links => const fb.ListReader<String>(const fb.StringReader())
      .vTableGet(_bc, _bcOffset, 10, null);

  @override
  String toString() {
    return 'Task{dataId: $dataId, tags: $tags, text: $text, links: $links}';
  }
}

class _TaskReader extends fb.TableReader<Task> {
  const _TaskReader();

  @override
  Task createObject(fb.BufferContext bc, int offset) => new Task._(bc, offset);
}

class TaskBuilder {
  TaskBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addDataIdOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addTagsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addTextOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addLinksOffset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaskObjectBuilder extends fb.ObjectBuilder {
  final String _dataId;
  final List<String> _tags;
  final String _text;
  final List<String> _links;

  TaskObjectBuilder({
    required String dataId,
    required List<String> tags,
    required String text,
    required List<String> links,
  })   : _dataId = dataId,
        _tags = tags,
        _text = text,
        _links = links;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int? dataIdOffset = fbBuilder.writeString(_dataId);
    final int? tagsOffset = _tags.isNotEmpty == true
        ? fbBuilder
            .writeList(_tags.map((b) => fbBuilder.writeString(b)).toList())
        : null;
    final int? textOffset = fbBuilder.writeString(_text);
    final int? linksOffset = _links.isNotEmpty == true
        ? fbBuilder
            .writeList(_links.map((b) => fbBuilder.writeString(b)).toList())
        : null;

    fbBuilder.startTable();
    if (dataIdOffset != null) {
      fbBuilder.addOffset(0, dataIdOffset);
    }
    if (tagsOffset != null) {
      fbBuilder.addOffset(1, tagsOffset);
    }
    if (textOffset != null) {
      fbBuilder.addOffset(2, textOffset);
    }
    if (linksOffset != null) {
      fbBuilder.addOffset(3, linksOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}

class Playthrough {
  Playthrough._(this._bc, this._bcOffset);
  factory Playthrough(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Playthrough> reader = const _PlaythroughReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Location get location => Location.reader.vTableGet(_bc, _bcOffset, 4, null);
  List<Task> get tasks =>
      const fb.ListReader<Task>(Task.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Playthrough{location: $location, tasks: $tasks}';
  }
}

class _PlaythroughReader extends fb.TableReader<Playthrough> {
  const _PlaythroughReader();

  @override
  Playthrough createObject(fb.BufferContext bc, int offset) =>
      new Playthrough._(bc, offset);
}

class PlaythroughBuilder {
  PlaythroughBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addLocationOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addTasksOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlaythroughObjectBuilder extends fb.ObjectBuilder {
  final LocationObjectBuilder _location;
  final List<TaskObjectBuilder> _tasks;

  PlaythroughObjectBuilder({
    required LocationObjectBuilder location,
    required List<TaskObjectBuilder> tasks,
  })   : _location = location,
        _tasks = tasks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int? locationOffset = _location.getOrCreateOffset(fbBuilder);
    final int? tasksOffset = _tasks.isNotEmpty == true
        ? fbBuilder.writeList(
            _tasks.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (locationOffset != null) {
      fbBuilder.addOffset(0, locationOffset);
    }
    if (tasksOffset != null) {
      fbBuilder.addOffset(1, tasksOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}

class PlaythroughRoot {
  PlaythroughRoot._(this._bc, this._bcOffset);
  factory PlaythroughRoot(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PlaythroughRoot> reader =
      const _PlaythroughRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Playthrough> get items =>
      const fb.ListReader<Playthrough>(Playthrough.reader)
          .vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'PlaythroughRoot{items: $items}';
  }
}

class _PlaythroughRootReader extends fb.TableReader<PlaythroughRoot> {
  const _PlaythroughRootReader();

  @override
  PlaythroughRoot createObject(fb.BufferContext bc, int offset) =>
      new PlaythroughRoot._(bc, offset);
}

class PlaythroughRootBuilder {
  PlaythroughRootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addItemsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlaythroughRootObjectBuilder extends fb.ObjectBuilder {
  final List<PlaythroughObjectBuilder> _items;

  PlaythroughRootObjectBuilder({
    required List<PlaythroughObjectBuilder> items,
  }) : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int? itemsOffset = _items.isNotEmpty == true
        ? fbBuilder.writeList(
            _items.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (itemsOffset != null) {
      fbBuilder.addOffset(0, itemsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
