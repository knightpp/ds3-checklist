// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ds3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Achievement {
  Achievement._(this._bc, this._bcOffset);
  factory Achievement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Achievement> reader = _AchievementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<Task>? get tasks => const fb.ListReader<Task>(Task.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Achievement{name: ${name}, description: ${description}, tasks: ${tasks}}';
  }
}

class _AchievementReader extends fb.TableReader<Achievement> {
  const _AchievementReader();

  @override
  Achievement createObject(fb.BufferContext bc, int offset) => 
    Achievement._(bc, offset);
}

class AchievementBuilder {
  AchievementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTasksOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AchievementObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _description;
  final List<TaskObjectBuilder>? _tasks;

  AchievementObjectBuilder({
    String? name,
    String? description,
    List<TaskObjectBuilder>? tasks,
  })
      : _name = name,
        _description = description,
        _tasks = tasks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? tasksOffset = _tasks == null ? null
        : fbBuilder.writeList(_tasks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, tasksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Task {
  Task._(this._bc, this._bcOffset);
  factory Task(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Task> reader = _TaskReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get play => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'Task{id: ${id}, name: ${name}, description: ${description}, play: ${play}}';
  }
}

class _TaskReader extends fb.TableReader<Task> {
  const _TaskReader();

  @override
  Task createObject(fb.BufferContext bc, int offset) => 
    Task._(bc, offset);
}

class TaskBuilder {
  TaskBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPlay(int? play) {
    fbBuilder.addUint8(3, play);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaskObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;
  final String? _description;
  final int? _play;

  TaskObjectBuilder({
    int? id,
    String? name,
    String? description,
    int? play,
  })
      : _id = id,
        _name = name,
        _description = description,
        _play = play;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    fbBuilder.startTable(4);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, descriptionOffset);
    fbBuilder.addUint8(3, _play);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AchievementsRoot {
  AchievementsRoot._(this._bc, this._bcOffset);
  factory AchievementsRoot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AchievementsRoot> reader = _AchievementsRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Achievement>? get items => const fb.ListReader<Achievement>(Achievement.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AchievementsRoot{items: ${items}}';
  }
}

class _AchievementsRootReader extends fb.TableReader<AchievementsRoot> {
  const _AchievementsRootReader();

  @override
  AchievementsRoot createObject(fb.BufferContext bc, int offset) => 
    AchievementsRoot._(bc, offset);
}

class AchievementsRootBuilder {
  AchievementsRootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AchievementsRootObjectBuilder extends fb.ObjectBuilder {
  final List<AchievementObjectBuilder>? _items;

  AchievementsRootObjectBuilder({
    List<AchievementObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
