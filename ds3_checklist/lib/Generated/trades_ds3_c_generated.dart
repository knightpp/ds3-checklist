// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ds3_c;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Trade {
  Trade._(this._bc, this._bcOffset);
  factory Trade(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Trade> reader = _TradeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get what => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get for_ => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Trade{id: ${id}, what: ${what}, for_: ${for_}}';
  }
}

class _TradeReader extends fb.TableReader<Trade> {
  const _TradeReader();

  @override
  Trade createObject(fb.BufferContext bc, int offset) => 
    Trade._(bc, offset);
}

class TradeBuilder {
  TradeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addWhatOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFor_Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TradeObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _what;
  final String? _for_;

  TradeObjectBuilder({
    int? id,
    String? what,
    String? for_,
  })
      : _id = id,
        _what = what,
        _for_ = for_;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? whatOffset = _what == null ? null
        : fbBuilder.writeString(_what!);
    final int? for_Offset = _for_ == null ? null
        : fbBuilder.writeString(_for_!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, whatOffset);
    fbBuilder.addOffset(2, for_Offset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TradesRoot {
  TradesRoot._(this._bc, this._bcOffset);
  factory TradesRoot(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TradesRoot> reader = _TradesRootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Trade>? get items => const fb.ListReader<Trade>(Trade.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TradesRoot{items: ${items}}';
  }
}

class _TradesRootReader extends fb.TableReader<TradesRoot> {
  const _TradesRootReader();

  @override
  TradesRoot createObject(fb.BufferContext bc, int offset) => 
    TradesRoot._(bc, offset);
}

class TradesRootBuilder {
  TradesRootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TradesRootObjectBuilder extends fb.ObjectBuilder {
  final List<TradeObjectBuilder>? _items;

  TradesRootObjectBuilder({
    List<TradeObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
